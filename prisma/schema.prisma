generator client {
    provider = "prisma-client-js"
}

// SUPABASE_SESSION    for model updates
// SUPABASE_TRANSACTION    for queries (prod)

datasource db {
    provider = "postgresql"
    url      = env("SUPABASE_TRANSACTION")
}

model Payable {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String   @db.VarChar(255)
    payedTo     String   @db.VarChar(255)
    description String   @db.VarChar(255)
    amount      Decimal  @db.Decimal(10, 2)
    date        DateTime @default(now())

    uploadedFiles UploadedFile[]

    Budget   Split?  @relation(fields: [budgetId], references: [id])
    budgetId String?

    authorId      String          @db.VarChar(255)
    RecurringInfo RecurringInfo[]
}

model Receivable {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name         String   @db.VarChar(255)
    receivedFrom String   @db.VarChar(255)
    description  String   @db.VarChar(255)
    amount       Decimal  @db.Decimal(10, 2)
    date         DateTime @default(now())

    uploadedFiles UploadedFile[]

    Budget   Split?  @relation(fields: [budgetId], references: [id])
    budgetId String? @db.VarChar(255)

    authorId      String          @db.VarChar(255)
    RecurringInfo RecurringInfo[]
}

model Split {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String  @db.VarChar(255)
    description String  @db.VarChar(255)
    amount      Decimal @db.Decimal(10, 2)

    Recievables Receivable[]
    Payables    Payable[]

    authorId String  @db.VarChar(255)
    Group    Group?  @relation(fields: [groupId], references: [id])
    groupId  String?
}

model Group {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String  @db.VarChar(255)
    description String  @db.VarChar(255)
    amount      Decimal @db.Decimal(10, 2)

    order Int @default(0)

    authorId String @db.VarChar(255)

    Splits Split[]
}

model UploadedFile {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String @db.VarChar(255)
    key  String @db.VarChar(255)
    type String @db.VarChar(255)
    size Int    @db.Integer
    url  String @db.VarChar(255)

    authorId String @db.VarChar(255)

    Payable   Payable? @relation(fields: [payableId], references: [id])
    payableId String?

    Receivable   Receivable? @relation(fields: [receivableId], references: [id])
    receivableId String?
}

model RecurringInfo {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    recurringType Int @default(0) //0 == monthly, 1 == bi-weekly, 2 == weekly, 4 == daily, 5 == quarterly, 6 == bi-annualy

    Payable   Payable? @relation(fields: [payableId], references: [id])
    payableId String?

    Receivable   Receivable? @relation(fields: [receivableId], references: [id])
    receivableId String?

    authorId String  @db.VarChar(255)
}
